# Copyright (c), 2021 NXP
# SPDX -License-Identifier: Apache-2.0

description: |
  NXP PCA9420 PMIC

  The PMIC has two buck converters and two LDOs. All need to be defined as
  children nodes, strictly following the BUCK1, BUCK2, LDO1 and LDO2 node names.
  For example:

  pmic@61 {
    reg = <0x61>;
    ...
    BUCK1 {
      /* all properties for BUCK1 */
    };
    BUCK2 {
      /* all properties for BUCK2 */
    };
    LDO1 {
      /* all properties for LDO1 */
    };
    LDO2 {
      /* all properties for LDO2 */
    };
  };


compatible: "nxp,pca9420"

include:
  - name: base.yaml
  - name: regulator.yaml
    property-allowlist:
      - regulator-allowed-modes
      - regulator-initial-mode

properties:
  modesel-reg:
    type: int
    description: |
      Mode selection register. This register is used by the regulator driver
      to select the target mode of the regulator

  modesel-mask:
    type: int
    description: |
      Mode selection mask. Applied to a mode selection when it is written
      to the modesel-reg.

child-binding:
  include:
    - name: regulator.yaml
      property-allowlist:
        - regulator-boot-on
        - regulator-min-microvolt
        - regulator-max-microvolt
        - regulator-max-microamp

  description: Voltage output of PMIC controller regulator
  properties:
      regulator-min-microvolt:
        required: true

      regulator-max-microvolt:
          required: true

      regulator-max-microamp:
          required: true

      voltage-range:
          type: array
          required: true
          description: |
             array of voltage values in uV, followed by the register value that
             must be written to enable the voltage. For example, [3300000, 0x3]
             denotes a value of 0x3 must be written to the register to set 3.3V
      num-voltages:
          type: int
          required: true
          description: number of voltages present in the voltage-range array.
      enable-inverted:
          type: boolean
          description: |
            If the enable bit should be zero to turn the regulator on, add this
            property.
      current-levels:
          type: array
          description: |
            Array of current limit values in uA, followed by the register value
            that must be written to enable the current limit. For example,
            [800000, 0x3] denotes a value of 0x3 must be written to the register
            to set a current limit of 800mA
      num-current-levels:
          type: int
          default: 0
          description: |
            Number of current limit levels this regulator supports. If left as
            default, regulator current support will be disabled.
